macro(create_gtest TEST_NAME)
    add_executable(${TEST_NAME} ${TEST_NAME}.cpp)
    if(MSVC)
        set_property(TARGET ${TEST_NAME} PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
        target_link_libraries(${TEST_NAME} PRIVATE GTest::gtest GTest::gtest_main ${RELATIVE_LIBS})
    else()
        target_link_libraries(${TEST_NAME} PRIVATE GTest::gtest GTest::gtest_main pthread ${RELATIVE_LIBS})
    endif()
    gtest_discover_tests(${TEST_NAME})
    add_dependencies(BuildAndTest ${TEST_NAME})
    message("create gtest:${TEST_NAME} --succeeded")
endmacro()

find_package(GTest REQUIRED)
if (GTEST_FOUND)
    include_directories(${GTEST_INCLUDE_DIRS})
    enable_testing()
    add_custom_target(BuildAndTest ${CMAKE_CTEST_COMMAND} -V --rerun-failed --output-on-failure)
    include(GoogleTest)
    set(CTEST_PARALLEL_LEVEL 6)
    aux_source_directory(. TEST_SOURCE_FILES)

    FOREACH(it ${TEST_SOURCE_FILES})
        get_filename_component(OUTPUT_FILE_WLE ${it} NAME_WLE)
        create_gtest(${OUTPUT_FILE_WLE})
    ENDFOREACH()
endif()